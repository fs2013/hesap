# AUTOGENERATED! DO NOT EDIT! File to edit: 01_pricedata.ipynb (unless otherwise specified).

__all__ = ['get_history_yf', 'get_history', 'my_key', 'ts']

# Cell

"""This module contains two methods of downloading price history
Yahoo Finance and Alpha Vantage are the data providers used
by faf
Copyright 2021 Fafs
License: http://creativecommons.org/licenses/by/4.0/
"""

import numpy as np
import pandas as pd
import yfinance as yf

from alpha_vantage.timeseries import TimeSeries

from typing import List


def get_history_yf(assets: List=None,
                   start_date: str='2000-01-01',
                   end_date: str=None) -> pd.DataFrame:
    """
    Gets price history of list of assets from Yahoo Finance.
    The price data contains the following:
    Open, High, Low, Close, Adj Close, Volume

    :param assets: (list of str) Asset symbols
    :param start_date: (str) Starting Date
    :param end_date: (str) End Date (Excluded)
    :return: (dict of pandas.DataFrame) price history of assets
    """
    if end_date is None:
        data = yf.download(assets, start_date)
    else:
        data = yf.download(assets, start_date, end_date)
    return data


my_key = open('../my_secrets/AlphaVantageKey').readline().strip()
ts = TimeSeries(key=my_key, output_format="pandas")

def get_history(assets: List=None, verbose: bool=True) -> pd.DataFrame:
    """
    Gets price history of list of assets from Alpha Vantage.
    The price data contains the following:
    open, high, low, close, adj_close, volume, dividend, and split_coef

    :param assets: (list of str) Asset symbols
    :param verbose: (bool) if True print some logs
    :return: (dict of pandas.DataFrame) price history of assets
    """
    prices = {}
    for i, asset in enumerate(assets):
        if verbose: print(asset)
        if len(asset) > 0:
            if i and i % 5 == 0:
                if verbose: print("5 assets loaded. waiting 60 seconds per AV api frequency limitations")
                sleep(60)
            data, meta_data = ts.get_daily_adjusted(asset, outputsize='full')
            if verbose: print(meta_data)
            if data.index.name.lower() == 'date':
                prices[asset] = data.rename(columns={
                    '1. open': 'open',
                    '2. high': 'high',
                    '3. low': 'low',
                    '4. close': 'close',
                    '5. adjusted close': 'adj_close',
                    '6. volume': 'volume',
                    '7. dividend amount': 'dividend',
                    '8. split coefficient': 'split_coef'}).sort_index()
            else:
                prices[asset] = data.rename(columns={
                    '1. open': 'open',
                    '2. high': 'high',
                    '3. low': 'low',
                    '4. close': 'close',
                    '5. adjusted close': 'adj_close',
                    '6. volume': 'volume',
                    '7. dividend amount': 'dividend',
                    '8. split coefficient': 'split_coef'}).sort_values(by='date', ascending=True)
    return prices